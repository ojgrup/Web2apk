name: Build via Web Configuration

on:
  # Ini adalah trigger utama: Menerima input dari website melalui API dispatch
  workflow_dispatch:
    inputs:
      app_url:
        description: 'URL Website (e.g., https://example.com)'
        required: true
        default: 'https://example.com'
      app_id:
        description: 'Package ID (e.g., myapp)'
        required: true
        default: 'web2apk'
      app_name:
        description: 'Display Name Aplikasi'
        required: true
        default: 'My Web App'
      icon_url:
        description: 'URL ke file PNG Ikon (192x192 disarankan)'
        required: false
      
jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      # --- LANGKAH BARU: MEMBUAT KONFIGURASI DARI INPUT WEBSITE ---
      - name: Generate Config File
        id: generate_config
        run: |
          # 1. Tulis konfigurasi ke webapk.conf
          echo "url = ${{ github.event.inputs.app_url }}" > webapk.conf
          echo "id = ${{ github.event.inputs.app_id }}" >> webapk.conf
          echo "name = ${{ github.event.inputs.app_name }}" >> webapk.conf
          echo "userAgent = MobileApp" >> webapk.conf
          
          # 2. Tangani Ikon: Download ikon jika URL disediakan
          ICON_PATH=""
          if [ -n "${{ github.event.inputs.icon_url }}" ]; then
              echo "Downloading custom icon from: ${{ github.event.inputs.icon_url }}"
              ICON_URL="${{ github.event.inputs.icon_url }}"
              
              # Tentukan nama file yang didownload
              ICON_FILE="app/downloaded_icon.png"
              
              # Download ikon
              curl -L -o "$ICON_FILE" "$ICON_URL"
              
              if [ -f "$ICON_FILE" ]; then
                  echo "icon_file_path=$ICON_FILE" >> $GITHUB_OUTPUT
                  ICON_PATH="app/downloaded_icon.png"
                  echo "icon = $ICON_PATH" >> webapk.conf
                  echo "Ikon akan diambil dari $ICON_PATH"
              else
                  echo "Warning: Failed to download icon from URL. Using default."
              fi
          fi
          
          # 3. Ekstrak App Name untuk penamaan Artifact
          APP_NAME="${{ github.event.inputs.app_id }}"
          echo "APP_NAME=$APP_NAME" >> $GITHUB_OUTPUT

      # --- KONFIGURASI SIGNING (Tetap sama) ---
      - name: Configure Signing Properties
        run: |
          if [ ! -f "app/${{ secrets.MYAPP_RELEASE_STORE_FILE }}" ]; then
            echo "Error: Keystore file app/${{ secrets.MYAPP_RELEASE_STORE_FILE }} not found in repository."
            exit 1
          fi
          
          echo "MYAPP_RELEASE_STORE_FILE=${{ secrets.MYAPP_RELEASE_STORE_FILE }}" >> gradle.properties
          echo "MYAPP_RELEASE_STORE_PASSWORD=${{ secrets.MYAPP_RELEASE_STORE_PASSWORD }}" >> gradle.properties
          echo "MYAPP_RELEASE_KEY_ALIAS=${{ secrets.MYAPP_RELEASE_KEY_ALIAS }}" >> gradle.properties
          echo "MYAPP_RELEASE_KEY_PASSWORD=${{ secrets.MYAPP_RELEASE_KEY_PASSWORD }}" >> gradle.properties
        env:
          MYAPP_RELEASE_STORE_FILE: ${{ secrets.MYAPP_RELEASE_STORE_FILE }}
          MYAPP_RELEASE_STORE_PASSWORD: ${{ secrets.MYAPP_RELEASE_STORE_PASSWORD }}
          MYAPP_RELEASE_KEY_ALIAS: ${{ secrets.MYAPP_RELEASE_KEY_ALIAS }}
          MYAPP_RELEASE_KEY_PASSWORD: ${{ secrets.MYAPP_RELEASE_KEY_PASSWORD }}

      - name: Grant Execute Permission for Gradle Wrapper
        run: chmod +x gradlew

      # --- BUILD DAN UPLOAD ARTIFACT (Harus menggunakan make.sh untuk apply_config) ---
      # Karena kita tidak ingin menggunakan make.sh lagi, kita harus meniru fungsi utamanya: chid, rename, set_var, set_icon.
      
      # PERHATIAN PENTING: Untuk mengimplementasikan 'chid' (mengganti package name dan folder Java)
      # tanpa make.sh, kita harus menggunakan script Bash yang kompleks.
      # Solusi yang lebih sederhana dan kuat adalah: KEMBALI menggunakan make.sh HANYA untuk apply_config!

      - name: Grant Execute Permission for make.sh
        run: chmod +x make.sh

      - name: Apply Configuration from webapk.conf
        # Kita menggunakan make.sh HANYA untuk menerapkan konfigurasi: chid, rename, dll.
        # Ini penting karena make.sh berisi logika kompleks untuk mengganti package name di banyak file.
        run: ./make.sh apply_config webapk.conf

      - name: Build Signed App Bundle (AAB)
        run: ./gradlew :app:bundleRelease --stacktrace

      - name: Upload Signed AAB Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.generate_config.outputs.APP_NAME }}-release-aab
          path: app/build/outputs/bundle/release/*.aab 
          retention-days: 7

      - name: Build Signed Release APK
        run: ./gradlew :app:assembleRelease --stacktrace

      - name: Upload Signed APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.generate_config.outputs.APP_NAME }}-release-apk
          path: app/build/outputs/apk/release/*.apk 
          retention-days: 7
